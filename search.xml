<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux笔记</title>
    <url>/2024/02/01/linux-xue-xi-bi-ji/</url>
    <content><![CDATA[<h1 id="Linux学习笔记"><a href="#Linux学习笔记" class="headerlink" title="Linux学习笔记"></a>Linux学习笔记</h1><p>[toc]</p>
<p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20231209150758178.png" alt="image-20231209150758178"></p>
<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p>
<ul>
<li><p><strong>&#x2F;bin</strong>：<br>  bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>&#x2F;boot：</strong><br>  这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>&#x2F;dev ：</strong><br>  dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong>&#x2F;etc：</strong><br>  etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
</li>
<li><p><strong>&#x2F;home</strong>：<br>  用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>
</li>
<li><p><strong>&#x2F;lib</strong>：<br>  lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>&#x2F;lost+found</strong>：<br>  这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>&#x2F;media</strong>：<br>  linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>&#x2F;mnt</strong>：<br>  系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>&#x2F;opt</strong>：<br>  opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>&#x2F;proc</strong>：<br>  proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>  这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
  <pre class="line-numbers language-none"><code class="language-none">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;icmp_echo_ignore_all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>&#x2F;root</strong>：<br>  该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p><strong>&#x2F;sbin</strong>：<br>  s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>&#x2F;selinux</strong>：<br>   这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
<li><p><strong>&#x2F;srv</strong>：<br>   该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>&#x2F;sys</strong>：</p>
<p>  这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p>
<p>  sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p>
<p>  该文件系统是内核设备树的一个直观反映。</p>
<p>  当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
</li>
<li><p><strong>&#x2F;tmp</strong>：<br>  tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p>
</li>
<li><p><strong>&#x2F;usr</strong>：<br>   usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>  系统用户使用的应用程序。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>  超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>&#x2F;usr&#x2F;src：</strong><br>  内核源代码默认的放置目录。</p>
</li>
<li><p><strong>&#x2F;var</strong>：<br>  var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
</li>
<li><p><strong>&#x2F;run</strong>：<br>  是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><p><strong>ls (list)</strong></p>
<ul>
<li><em>作用</em>：列出目录内容。</li>
<li><em>常用参数</em>：<ul>
<li><code>-l</code>：以长格式显示详细信息。</li>
<li><code>-a</code>：显示所有文件，包括以<code>.</code>开头的隐藏文件。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>cd (change directory)</strong></p>
<ul>
<li><em>作用</em>：改变当前工作目录。</li>
<li><em>参数</em>：目标目录的路径。</li>
</ul>
</li>
<li><p><strong>cp (copy)</strong></p>
<ul>
<li><em>作用</em>：复制文件或目录。</li>
<li><em>常用参数</em>：<ul>
<li><code>-r</code>：递归地复制目录及其内容。</li>
<li><code>-i</code>：在覆盖文件之前进行提示。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>mv (move)</strong></p>
<ul>
<li><em>作用</em>：移动文件或目录，也可用于重命名。</li>
<li><em>常用参数</em>：<ul>
<li><code>-i</code>：在覆盖文件之前进行提示。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>rm (remove)</strong></p>
<ul>
<li><em>作用</em>：删除文件或目录。</li>
<li><em>常用参数</em>：<ul>
<li><code>-r</code>：递归删除目录及其内容。</li>
<li><code>-f</code>：强制执行，不进行提示。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>mkdir (make directory)</strong></p>
<ul>
<li><em>作用</em>：创建新目录。</li>
<li><em>常用参数</em>：<ul>
<li><code>-p</code>：递归创建目录，如果父目录不存在也会创建。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>rmdir (remove directory)</strong></p>
<ul>
<li><em>作用</em>：删除空目录。</li>
<li><em>参数</em>：目标目录的路径。</li>
</ul>
</li>
<li><p><strong>touch</strong></p>
<ul>
<li><em>作用</em>：更新文件的访问和修改时间，也可用于创建新文件。</li>
<li><em>参数</em>：文件名。</li>
</ul>
</li>
<li><p><strong>cat (concatenate)</strong></p>
<ul>
<li><em>作用</em>：连接文件并打印到标准输出。</li>
<li><em>参数</em>：文件名。</li>
</ul>
</li>
<li><p><strong>grep (global regular expression print)</strong></p>
<ul>
<li><em>作用</em>：在文件中搜索文本模式。</li>
<li><em>常用参数</em>：<ul>
<li><code>-i</code>：忽略大小写。</li>
<li><code>-r</code>：递归搜索目录及其子目录。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>find</strong></p>
<ul>
<li><em>作用</em>：在文件系统中查找文件。</li>
<li><em>常用参数</em>：<ul>
<li>路径：指定查找的起始路径。</li>
<li><code>-name</code>：按文件名进行匹配。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>chmod (change mode)</strong></p>
<ul>
<li><em>作用</em>：更改文件权限。</li>
<li><em>常用参数</em>：<ul>
<li>使用数字表示权限，例如，<code>chmod 755 filename</code>。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>chown (change owner)</strong></p>
<ul>
<li><em>作用</em>：更改文件所有者。</li>
<li><em>常用参数</em>：<ul>
<li><code>user:group</code>：指定新的所有者和组。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>ps (process status)</strong></p>
<ul>
<li><em>作用</em>：显示当前进程的状态。</li>
<li><em>常用参数</em>：<ul>
<li><code>aux</code>：以详细信息的形式显示所有进程。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>查看端口</strong></p>
<ul>
<li><p>netstat&#x2F;ss -tulpn</p>
<p>  参数解释：</p>
<ul>
<li><code>-t</code>: 显示TCP连接</li>
<li><code>-u</code>: 显示UDP连接</li>
<li><code>-l</code>: 显示监听中的端口</li>
<li><code>-p</code>: 显示进程标识（PID）</li>
<li><code>-n</code>: 显示数值形式的地址和端口号</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>kill</strong></p>
<ul>
<li><em>作用</em>：终止进程。</li>
<li><em>参数</em>：进程ID（PID）或进程名。</li>
</ul>
</li>
<li><p><strong>通用参数</strong></p>
<ul>
<li><code>-h</code> 或 <code>--help</code>：<em>显示帮助信息</em>。</li>
<li><code>-v</code> 或 <code>--version</code>：<em>显示命令的版本信息</em>。</li>
</ul>
</li>
<li><p><strong>文件&#x2F;目录操作命令通用参数</strong></p>
<ul>
<li><code>-r</code> 或 <code>--recursive</code>：<em>递归操作</em>，用于处理目录及其内容。</li>
<li><code>-f</code> 或 <code>--force</code>：<em>强制执行</em>，<em>不进行提示</em>。</li>
</ul>
</li>
<li><p><strong>复制&#x2F;移动命令通用参数</strong></p>
<ul>
<li><code>-i</code>：<em>在操作之前进行提示</em>，询问用户是否确认执行。</li>
</ul>
</li>
<li><p><strong>目录创建命令通用参数</strong></p>
<ul>
<li><code>-p</code>：<em>递归创建目录</em>，如果父目录不存在也会创建。</li>
</ul>
</li>
<li><p><strong>搜索命令通用参数</strong></p>
<ul>
<li><code>-i</code>：<em>忽略大小写</em>。	</li>
<li><code>-r</code> 或 <code>--recursive</code>：<em>递归搜索</em>目录及其子目录。</li>
</ul>
</li>
<li><p><strong>权限相关命令通用参数</strong></p>
<ul>
<li><code>-v</code> 或 <code>--verbose</code>：<em>详细输出</em>，显示更多信息。</li>
<li><code>-R</code> 或 <code>--recursive</code>：<em>递归地应用权限更改</em>。</li>
</ul>
</li>
<li><p><strong>进程管理命令通用参数</strong></p>
<ul>
<li><code>-a</code>：<em>显示所有</em>进程。</li>
<li><code>-u</code>：<em>显示与指定用户相关的</em>进程。<table>
<thead>
<tr>
<th>命令</th>
<th>参数</th>
<th>作用</th>
<th>提示</th>
</tr>
</thead>
<tbody><tr>
<td><code>ls</code></td>
<td><code>-l</code></td>
<td>列出目录内容</td>
<td>以长格式显示详细信息</td>
</tr>
<tr>
<td><code>ls</code></td>
<td><code>-a</code></td>
<td>列出目录内容</td>
<td>显示所有文件，包括隐藏文件</td>
</tr>
<tr>
<td><code>cd</code></td>
<td>目标路径</td>
<td>改变当前工作目录</td>
<td>-</td>
</tr>
<tr>
<td><code>cp</code></td>
<td><code>-r</code></td>
<td>复制文件或目录</td>
<td>递归地复制目录及其内容</td>
</tr>
<tr>
<td><code>cp</code></td>
<td><code>-i</code></td>
<td>复制文件或目录</td>
<td>在覆盖文件之前进行提示</td>
</tr>
<tr>
<td><code>mv</code></td>
<td><code>-i</code></td>
<td>移动文件或目录</td>
<td>在覆盖文件之前进行提示</td>
</tr>
<tr>
<td><code>rm</code></td>
<td><code>-r</code></td>
<td>删除文件或目录</td>
<td>递归删除目录及其内容</td>
</tr>
<tr>
<td><code>rm</code></td>
<td><code>-f</code></td>
<td>删除文件或目录</td>
<td>强制执行，不进行提示</td>
</tr>
<tr>
<td><code>mkdir</code></td>
<td><code>-p</code></td>
<td>创建新目录</td>
<td>递归创建目录，如果父目录不存在也会创建</td>
</tr>
<tr>
<td><code>rmdir</code></td>
<td>目标路径</td>
<td>删除空目录</td>
<td>-</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>文件名</td>
<td>更新文件的访问和修改时间，也可用于创建新文件</td>
<td>-</td>
</tr>
<tr>
<td><code>echo</code></td>
<td>文件名</td>
<td>向文件追加内容</td>
<td>-</td>
</tr>
<tr>
<td><code>cat</code></td>
<td>文件名</td>
<td>输出文件内容</td>
<td>-</td>
</tr>
<tr>
<td><code>grep</code></td>
<td><code>-i</code></td>
<td>在文件中搜索文本模式</td>
<td>忽略大小写</td>
</tr>
<tr>
<td><code>grep</code></td>
<td><code>-r</code></td>
<td>在文件中搜索文本模式</td>
<td>递归搜索目录及其子目录</td>
</tr>
<tr>
<td><code>find</code></td>
<td>路径</td>
<td>在文件系统中查找文件</td>
<td>指定查找的起始路径</td>
</tr>
<tr>
<td><code>find</code></td>
<td><code>-name</code></td>
<td>在文件系统中查找文件</td>
<td>按文件名进行匹配</td>
</tr>
<tr>
<td><code>chmod</code></td>
<td>权限</td>
<td>更改文件权限</td>
<td>使用数字表示权限，例如，<code>chmod rwx filename</code></td>
</tr>
<tr>
<td><code>chown</code></td>
<td><code>user:group</code></td>
<td>更改文件所有者</td>
<td>指定新的所有者和组</td>
</tr>
<tr>
<td><code>ps</code></td>
<td><code>-aux</code></td>
<td>显示当前进程的状态</td>
<td>以详细信息的形式显示所有进程</td>
</tr>
<tr>
<td><code>kill</code></td>
<td>进程ID（PID）或进程名</td>
<td>终止进程</td>
<td>-</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<h2 id="硬链接和软链接（ln）"><a href="#硬链接和软链接（ln）" class="headerlink" title="硬链接和软链接（ln）"></a>硬链接和软链接（ln）</h2><p> <strong>硬链接(不加参数)</strong>:相当于将文件又创建了一份，删除其中一份不影响其他文件</p>
<p> <strong>软链接（加参数：-s）</strong>：相当于创建了一个快捷键</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">示例：ln <span class="token parameter variable">-s</span> 源目录/源文件 目标目录/目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h2><ol>
<li><p><strong>useradd</strong></p>
<ul>
<li><em>作用</em>：创建用户。</li>
<li><em>常用参数</em>：<ul>
<li><code>-m</code>：默认在当前目录自动创建用户。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>userdel</strong></p>
<ul>
<li><em>作用</em>：删除用户。</li>
<li><em>常用参数</em>：<ul>
<li><code>-r</code>：删除用户的文件。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>su、sudo</strong></p>
<ul>
<li><em>作用</em>：切换用户。</li>
<li><em>说明</em>：su必须告知密码，而sudo只是为账号临时分配一定操作权限。</li>
</ul>
</li>
<li><p>修改用户名</p>
<h4 id="临时生效"><a href="#临时生效" class="headerlink" title="临时生效"></a>临时生效</h4><p>通过<code>hostname</code>进行修改，输入命令<code>hostname 主机名</code>，重新登录 <code>shell</code> 生效。这个命令的作用是暂时修改linux的主机名，它的存活时间是linux当前的运行时间，也就是在下一次重启前的运行时间内。一般修改以后立即生效，但这只是临时生效，不是永久生效，重启系统之后会还原。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># hostname test</span>
<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>重新登录<code>shell</code>之后主机名已经被修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="永久方法"><a href="#永久方法" class="headerlink" title="永久方法"></a>永久方法</h4><h6 id="通过修改配置文件-etc-sysconfig-network"><a href="#通过修改配置文件-etc-sysconfig-network" class="headerlink" title="通过修改配置文件/etc/sysconfig/network"></a>通过修改配置文件<code>/etc/sysconfig/network</code></h6><p>在这个配置文件中底部添加一条HOSTNAME&#x3D;主机名(可自定义)，这个修改它能够实现永久修改linux的主机名，但是它不会立即生效，也不会重新登录shell生效，而是要重启系统才能生效。通过修改此配置文件，再配合hostname命令，可以实现立即永久修改linux的主机名，当然了，至少需要重启shell才可以。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/sysconfig/network</span>
<span class="token comment"># Created by anaconda</span>
<span class="token assign-left variable">NETWORKING_IPV6</span><span class="token operator">=</span>no
<span class="token assign-left variable">PEERNTP</span><span class="token operator">=</span>no
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果是 Ubuntu 系统，则需要修改文件 &#x2F;etc&#x2F;hostname， 将其对应的主机名修改为新的主机名。<br>最后，需要将 <code>/etc/hosts</code> 中 127.0.0.1 对应的老主机名更换为新的主机名（如果有需要）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span>
<span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="通过命令hostnamectl-set-hostname-主机名修改"><a href="#通过命令hostnamectl-set-hostname-主机名修改" class="headerlink" title="通过命令hostnamectl set-hostname 主机名修改"></a>通过命令<code>hostnamectl set-hostname 主机名</code>修改</h6><p><a href="https://so.csdn.net/so/search?q=centos7&spm=1001.2101.3001.7020">centos7</a>系统可以直接通过命令<code>hostnamectl set-hostname 主机名</code>进行修改，修改完毕后重新登录 <code>shell</code> 就可以了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># hostnamectl set-hostname centos7</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ol>
<li><p><strong>什么是进程</strong></p>
<ul>
<li><p>每一个进程都会有一个父进程</p>
</li>
<li><p>进程分两种形式：前台、后台</p>
</li>
<li><p>一般服务器都是后台运行</p>
</li>
</ul>
</li>
<li><p><strong>命令</strong></p>
<ul>
<li><em>Ps -xx</em> :查看当前运行的进程<ul>
<li>‘-a’ ：显示所有运行的进程</li>
<li>‘-u’ ：以用户的信息显示进程</li>
<li>‘-x’ ：显示后台运行进程的参数</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql <span class="token comment">#查看关于mysql的所有进程</span>

<span class="token comment"># | 管道符，ps -aux运行的结果作为grep的数据</span>
<span class="token comment"># grep筛选命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="firewall管理"><a href="#firewall管理" class="headerlink" title="firewall管理"></a>firewall管理</h2><ol>
<li><p><strong>查看防火墙状态：</strong></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--state</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>启用防火墙：</strong></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start firewalld
或者
<span class="token function">sudo</span> <span class="token function">service</span> firewalld start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>停止防火墙：</strong></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop firewalld
或者
<span class="token function">sudo</span> <span class="token function">service</span> firewalld stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>重启防火墙：</strong></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart firewalld
或者
<span class="token function">sudo</span> <span class="token function">service</span> firewalld restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>查看防火墙规则：</strong></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看全部信息</span>
<span class="token function">sudo</span> firewall-cmd --list-all
<span class="token comment">#只看端口</span>
<span class="token function">sudo</span> firewall-cmd --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>添加允许端口：</strong></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#--permanent永久生效 --zone作用域</span>
<span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token operator">&lt;</span>端口号<span class="token operator">></span>/tcp <span class="token parameter variable">--permanent</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>重新载入防火墙规则：</strong></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span>
或者
<span class="token function">sudo</span> systemctl restart firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="1-JDK的安装与卸载（rpm安装）无需配置环境变量"><a href="#1-JDK的安装与卸载（rpm安装）无需配置环境变量" class="headerlink" title="1.JDK的安装与卸载（rpm安装）无需配置环境变量"></a>1.<strong>JDK的安装与卸载（rpm安装）</strong>无需配置环境变量</h3><ul>
<li><p><em>检查版本</em>: java -version</p>
</li>
<li><p><em>显示jdk具体版本</em>：rpm -qa|grep jdk</p>
</li>
<li><p><em>卸载jdk</em>:rpm -e –nodeps jdk??</p>
</li>
<li><p><em>安装jdk</em>:rpm -ivh jdk??</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token comment">#显示具体版本</span>
 <span class="token punctuation">[</span>root@localhost<span class="token punctuation">]</span>/home/usrsan<span class="token comment"># rpm -qa|grep jdk </span>
 java-1.7.0-openjdk-headless-1.7.0.261-2.6.22.2.el7_8.x86_64

 <span class="token comment">#卸载jdk</span>
 <span class="token punctuation">[</span>root@localhost<span class="token punctuation">]</span>/home/usrsan<span class="token comment"># rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.261-2.6.22.2.el7_8.x86_64</span>

 <span class="token comment">#查看版本</span>
 <span class="token punctuation">[</span>root@localhost<span class="token punctuation">]</span>/home/usrsan<span class="token comment"># java -version</span>
 zsh: java: 未找到命令<span class="token punctuation">..</span>.
 zsh: <span class="token builtin class-name">command</span> not found: <span class="token function">java</span>
 <span class="token punctuation">[</span>root@localhost<span class="token punctuation">]</span>/home/usrsan<span class="token comment"># ls -al</span>
 总用量 <span class="token number">175300</span>
 drwxr-xr-x. <span class="token number">2</span> root root        <span class="token number">37</span> <span class="token number">12</span>月 <span class="token number">16</span> 09:17 <span class="token builtin class-name">.</span>
 drwxr-xr-x. <span class="token number">4</span> root root        <span class="token number">31</span> <span class="token number">12</span>月 <span class="token number">16</span> 09:16 <span class="token punctuation">..</span>
 -rw-r--r--. <span class="token number">1</span> root root <span class="token number">179505388</span> <span class="token number">12</span>月 <span class="token number">16</span> 09:17 jdk-8u221-linux-x64.rpm

<span class="token comment">#安装jdk</span>
 <span class="token punctuation">[</span>root@localhost<span class="token punctuation">]</span>/home/usrsan<span class="token comment"># rpm -ivh jdk-8u221-linux-x64.rpm </span>
 警告：jdk-8u221-linux-x64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID ec551f03: NOKEY
 准备中<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>
 正在升级/安装<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<ul>
<li><em>配置环境变量</em>：在&#x2F;etc&#x2F;profile文件末尾追加以下内容</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/java/jdk1.8.0_221-amd64
<span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib.tools.jar
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>
<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span> CLASSPATH JAVA_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-tomcat的安装-压缩包安装"><a href="#2-tomcat的安装-压缩包安装" class="headerlink" title="2.tomcat的安装(压缩包安装)"></a>2.<strong>tomcat的安装(压缩包安装)</strong></h3><ul>
<li><em>下载并上传tomcat</em></li>
<li><em>解压缩文件</em>：tar -zxvf apache-tomcat-9.0.22.tar.gz</li>
<li><em>运行<code>./startup.sh</code>和停止<code>./shutdown.sh</code></em></li>
</ul>
<h3 id="3-Docker安装（yum安装）"><a href="#3-Docker安装（yum安装）" class="headerlink" title="3.Docker安装（yum安装）"></a>3.Docker安装（yum安装）</h3><ul>
<li><p><strong>使用官方安装脚本自动安装</strong></p>
<p>  安装命令如下：</p>
  <pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p><strong>手动安装</strong></p>
</li>
</ul>
<p>​	<a href="https://www.runoob.com/docker/centos-docker-install.html">docker手动安装教程</a></p>
<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h4 id="zsh安装"><a href="#zsh安装" class="headerlink" title="zsh安装"></a>zsh安装</h4><p>**Ubuntu&#x2F;Kali&#x2F;Debian 安装 **</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装zsh</span>
<span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span>

<span class="token comment"># 更改默认shell为zsh</span>
chsh <span class="token parameter variable">-s</span> /bin/zsh

<span class="token comment"># 安装oh-my-zsh</span>
<span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>

<span class="token comment"># 下载命令补全插件</span>
<span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class="token variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions

<span class="token comment"># zshrc配置文件中修改如下内容</span>
<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git zsh-autosuggestions<span class="token punctuation">)</span>

<span class="token comment"># 重新加载zsh配置</span>
<span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>CentOS 安装</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装zsh</span>
yum <span class="token function">install</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>除了安装使用 yum 以外，其他配置方法和上面其他发行版系统一样，这里就不再赘述了。</p>
<p><strong>zsh 插件</strong></p>
<p><strong>autojump</strong></p>
<p>快捷目录跳转插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> autojump autojump-zsh <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 <code>~/.zshrc</code> 中配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>其他的插件 autojump<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入 <code>zsh</code> 命令生效配置后即可正常使用 <code>j</code> 命令，下面是简单的演示效果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token environment constant">BASH</span><span class="token comment"># root @ centos in ~/test/23333 [18:45:14]</span>
$ <span class="token builtin class-name">pwd</span>
/root/test/23333

<span class="token comment"># root @ centos in ~/test/23333 [18:45:16]</span>
$ <span class="token builtin class-name">cd</span> ~

<span class="token comment"># root @ centos in ~ [18:45:17] 直接 j 2 就跳转到历史目录了</span>
$ j <span class="token number">2</span>
/root/test/23333

<span class="token comment"># root @ centos in ~/test/23333 [18:45:20]</span>
$ <span class="token builtin class-name">pwd</span>
/root/test/23333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>zsh-syntax-highlighting</strong></p>
<p>命令输入正确会绿色高亮显示，可以有效地检测命令语法是否正确</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.oh-my-zsh/custom/plugins
<span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在 <code>~/.zshrc</code> 中配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>其他的插件 zsh-syntax-highlighting<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入 <code>zsh</code> 命令生效配置</p>
<p><strong>autosuggestions</strong></p>
<p>终端下自动提示接下来可能要输入的命令，这个实际使用效率还是比较高的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.oh-my-zsh/custom/plugins
<span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在 <code>~/.zshrc</code> 中配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>其他的插件 zsh-autosuggestions<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>输入 <code>zsh</code> 命令生效配置</p>
<h4 id="bash和zsh切换"><a href="#bash和zsh切换" class="headerlink" title="bash和zsh切换"></a>bash和zsh切换</h4><ul>
<li><p><em>1.使用<code>chsh</code>命令：</em></p>
<p><code>chsh</code>命令允许你更改默认的shell。在终端中运行以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh <span class="token parameter variable">-s</span> /bin/bash  <span class="token comment"># 切换到bash</span>
chsh <span class="token parameter variable">-s</span> /bin/zsh  <span class="token comment"># 切换到zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<p>   这将分别将默认shell更改为bash或zsh。你需要重新登录才能看到更改。</p>
<ul>
<li><p><em>2.手动切换：</em></p>
<p>如果你只是想在当前会话中切换shell，而不更改默认shell，你可以手动运行bash或zsh：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span>  <span class="token comment"># 切换到bash</span>
<span class="token function">zsh</span>   <span class="token comment"># 切换到zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><h3 id="Vim-的基础使用方法："><a href="#Vim-的基础使用方法：" class="headerlink" title="Vim 的基础使用方法："></a>Vim 的基础使用方法：</h3><h4 id="1-启动-Vim："><a href="#1-启动-Vim：" class="headerlink" title="1. 启动 Vim："></a>1. <strong>启动 Vim：</strong></h4><pre class="line-numbers language-none"><code class="language-none">bashCopy code
vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>或者</p>
<pre class="line-numbers language-none"><code class="language-none">bashCopy code
vim 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="2-Vim-模式："><a href="#2-Vim-模式：" class="headerlink" title="2. Vim 模式："></a>2. <strong>Vim 模式：</strong></h4><ul>
<li>Normal 模式：<ul>
<li>默认模式，用于导航、剪切、复制等。</li>
</ul>
</li>
<li>Insert 模式：<ul>
<li>用于输入文本。</li>
</ul>
</li>
<li>Visual 模式：<ul>
<li>用于选择文本块。</li>
</ul>
</li>
</ul>
<h4 id="3-基本移动："><a href="#3-基本移动：" class="headerlink" title="3. 基本移动："></a>3. <strong>基本移动：</strong></h4><ul>
<li>h、j、k、l：<ul>
<li>分别是左、下、上、右，用于在 Normal 模式下移动光标。</li>
</ul>
</li>
<li>w、b：<ul>
<li>分别是向前和向后移动一个单词。</li>
</ul>
</li>
<li>gg、G：<ul>
<li>跳转到文件开头和文件末尾。</li>
</ul>
</li>
</ul>
<h4 id="4-编辑操作："><a href="#4-编辑操作：" class="headerlink" title="4. 编辑操作："></a>4. <strong>编辑操作：</strong></h4><ul>
<li>i、I、a、A：<ul>
<li>进入 Insert 模式，分别在当前光标前插入、行首插入、光标后插入、行尾插入。</li>
</ul>
</li>
<li>o、O：<ul>
<li>在当前行的下方（o）或上方（O）插入新行。</li>
</ul>
</li>
<li>x、dd：<ul>
<li>删除光标处的字符（x）或整行（dd）。</li>
</ul>
</li>
</ul>
<h4 id="5-复制和粘贴："><a href="#5-复制和粘贴：" class="headerlink" title="5. 复制和粘贴："></a>5. <strong>复制和粘贴：</strong></h4><ul>
<li>yy：<ul>
<li>复制当前行。</li>
</ul>
</li>
<li>p：<ul>
<li>粘贴复制的内容。</li>
</ul>
</li>
</ul>
<h4 id="6-撤销和重做："><a href="#6-撤销和重做：" class="headerlink" title="6. 撤销和重做："></a>6. <strong>撤销和重做：</strong></h4><ul>
<li>u：<ul>
<li>撤销上一步操作。</li>
</ul>
</li>
<li>Ctrl + r：<ul>
<li>重做。</li>
</ul>
</li>
</ul>
<h4 id="7-搜索和替换："><a href="#7-搜索和替换：" class="headerlink" title="7. 搜索和替换："></a>7. <strong>搜索和替换：</strong></h4><ul>
<li>&#x2F;search：<ul>
<li>在 Normal 模式下输入 <code>/</code> 后跟要搜索的内容，按 Enter 开始搜索。</li>
</ul>
</li>
<li>:s&#x2F;old&#x2F;new&#x2F;g：<ul>
<li>替换文档中所有出现的 “old” 为 “new”。</li>
</ul>
</li>
</ul>
<h4 id="8-保存和退出："><a href="#8-保存和退出：" class="headerlink" title="8. 保存和退出："></a>8. <strong>保存和退出：</strong></h4><ul>
<li>:w：<ul>
<li>保存当前文件。</li>
</ul>
</li>
<li>:q：<ul>
<li>退出 Vim。</li>
</ul>
</li>
<li>:wq 或 :x：<ul>
<li>保存并退出。</li>
</ul>
</li>
<li>:q!：<ul>
<li>强制退出，不保存更改。</li>
</ul>
</li>
</ul>
<h4 id="9-Visual-模式："><a href="#9-Visual-模式：" class="headerlink" title="9. Visual 模式："></a>9. <strong>Visual 模式：</strong></h4><ul>
<li>v：<ul>
<li>逐字符选择。</li>
</ul>
</li>
<li>V：<ul>
<li>逐行选择。</li>
</ul>
</li>
<li>Ctrl + v：<ul>
<li>逐块选择（矩形选择）。</li>
</ul>
</li>
</ul>
<h3 id="Vim-的高级使用方法："><a href="#Vim-的高级使用方法：" class="headerlink" title="Vim 的高级使用方法："></a>Vim 的高级使用方法：</h3><h4 id="1-分屏和多窗口："><a href="#1-分屏和多窗口：" class="headerlink" title="1. 分屏和多窗口："></a>1. <strong>分屏和多窗口：</strong></h4><ul>
<li>:split 或 :sp：<ul>
<li>水平分割窗口。</li>
</ul>
</li>
<li>:vsplit 或 :vsp：<ul>
<li>垂直分割窗口。</li>
</ul>
</li>
<li>Ctrl + w + 方向键：<ul>
<li>在窗口之间切换。</li>
</ul>
</li>
</ul>
<h4 id="2-标签页："><a href="#2-标签页：" class="headerlink" title="2. 标签页："></a>2. <strong>标签页：</strong></h4><ul>
<li>:tabnew 文件名：<ul>
<li>打开一个新标签页。</li>
</ul>
</li>
<li>:tabnext 或 :tabn：<ul>
<li>切换到下一个标签页。</li>
</ul>
</li>
<li>:tabprev 或 :tabp：<ul>
<li>切换到上一个标签页。</li>
</ul>
</li>
<li>:tabclose 或 :tabc：<ul>
<li>关闭当前标签页。</li>
</ul>
</li>
</ul>
<h4 id="3-宏录制："><a href="#3-宏录制：" class="headerlink" title="3. 宏录制："></a>3. <strong>宏录制：</strong></h4><ul>
<li>q + 字母：<ul>
<li>开始录制宏。例如，<code>qa</code> 开始录制到寄存器 a。</li>
</ul>
</li>
<li>q：<ul>
<li>结束录制宏。</li>
</ul>
</li>
<li>@ + 字母：<ul>
<li>执行宏。例如，<code>@a</code> 执行寄存器 a 中的宏。</li>
</ul>
</li>
</ul>
<h4 id="4-自定义配置："><a href="#4-自定义配置：" class="headerlink" title="4. 自定义配置："></a>4. <strong>自定义配置：</strong></h4><ul>
<li>~&#x2F;.vimrc 文件：<ul>
<li>你可以在此文件中添加 Vim 配置，定制你的编辑器环境。</li>
</ul>
</li>
</ul>
<h4 id="5-插件管理器："><a href="#5-插件管理器：" class="headerlink" title="5. 插件管理器："></a>5. <strong>插件管理器：</strong></h4><ul>
<li>使用插件管理器如 Vundle、Pathogen 或 Vim-Plug，以便轻松管理和安装插件。</li>
</ul>
<h4 id="6-语法高亮和主题："><a href="#6-语法高亮和主题：" class="headerlink" title="6. 语法高亮和主题："></a>6. <strong>语法高亮和主题：</strong></h4><ul>
<li>启用语法高亮：在 Normal 模式下输入 <code>:syntax on</code>。</li>
<li>切换主题：在 Normal 模式下输入 <code>:colorscheme 主题名称</code>。</li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+github部署</title>
    <url>/2024/02/01/hexo-github-bu-shu/</url>
    <content><![CDATA[<h1 id="Hexo-github部署"><a href="#Hexo-github部署" class="headerlink" title="Hexo+github部署"></a>Hexo+github部署</h1><p>[toc]</p>
<h3 id="一-环境安装"><a href="#一-环境安装" class="headerlink" title="一 环境安装"></a>一 环境安装</h3><ul>
<li><em>安装git</em>:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
<li>*安装nodejs:*<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li>
</ul>
<h3 id="二-Hexo安装"><a href="#二-Hexo安装" class="headerlink" title="二 Hexo安装"></a>二 Hexo安装</h3><ul>
<li><p>新建一个文件夹Hexo，在建一个子文件夹blog，在blog文件夹内调出git bash</p>
</li>
<li><pre><code class="bash">  npm install hexo-cli -g
  hexo init
  <pre class="line-numbers language-none"><code class="language-none">
### 三 常用命令

&#96;&#96;&#96;bash
&#x2F;&#x2F;构建命令
hexo g
&#x2F;&#x2F;启动服务器
hexo s
&#x2F;&#x2F;推送
hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
</li>
</ul>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed <span class="token parameter variable">--save</span>                 <span class="token comment">#R SS</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span>                   <span class="token comment"># git部署</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb <span class="token parameter variable">--save</span>             <span class="token comment"># 搜索</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-seo-friendly-sitemap <span class="token parameter variable">--save</span> <span class="token comment"># sitemap</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap <span class="token parameter variable">--save</span>        <span class="token comment"># 百度sitemap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h3><p><em>避免每次推送都需要输入密码</em></p>
<ul>
<li><p>在已经安装部署插件的情况下运行命令：<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>本地生成获取ssh密钥</p>
<ul>
<li><p>(1)生成密钥：运行命令：ssh-keygen -t rsa -C “youremail”（这里改为自己的邮箱），可能要一路回车</p>
</li>
<li><p>(2)获取密钥：在Git Bash运行命令cat ~&#x2F;.ssh&#x2F;id_rsa.pub，然后复制这行命令运行的结果</p>
</li>
</ul>
</li>
<li><p>github创建ssh密钥</p>
<ul>
<li>(1)打开<a href="http://github.com/">github</a>，在右上角的头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去，点击create&#x2F;创建即可完成创建</li>
</ul>
</li>
<li><p>验证ssh连接是否成功：ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;</a>，出现用户名，即代表访问成功</p>
</li>
</ul>
<h3 id="四-推送到gitHub"><a href="#四-推送到gitHub" class="headerlink" title="四 推送到gitHub"></a>四 推送到gitHub</h3><ul>
<li><p>注册登录github账号</p>
</li>
<li><p>创建一个仓库，仓库命名：用户名&#x2F;仓库名</p>
<ul>
<li>例如我的用户名是 “Imxiaosan”，仓库名是 “Imxiaosan.github.io”，那么地址就是：<a href="https://github.com/Imxiaosan/Imxiaosan.github.io">https://github.com/Imxiaosan/Imxiaosan.github.io</a></li>
</ul>
</li>
<li><p>配置_config.yml文件</p>
<ul>
<li><p>在url标签里面加入仓库的页面地址，***<u>如果不设置推送之后会构建失败</u>***</p>
</li>
<li><p>在文件最后添加仓库推送地址</p>
</li>
</ul>
</li>
</ul>
<h3 id="五-安装主题"><a href="#五-安装主题" class="headerlink" title="五 安装主题"></a>五 安装主题</h3><ol>
<li><p>下载主题放置到themes&#x2F;文件夹下</p>
</li>
<li><p>更改_config.yml文件中的主题为主题文件夹的名字</p>
<ul>
<li><p>例如next主题</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<h3 id="六-hexo-editor安装"><a href="#六-hexo-editor安装" class="headerlink" title="六 hexo-editor安装"></a>六 hexo-editor安装</h3><ul>
<li>hexo editor可以无账户密码登录</li>
<li>初始账户和密码在配置文件_config.yml中</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/tajpure/hexo-editor.git
<span class="token builtin class-name">cd</span> hexo-editor
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--production</span>
<span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h3><p><strong>问题一：每次向仓库推送本地文件时都需要在github后台手动提交，这样会很麻烦</strong></p>
<p><strong>解决：设置自动构建需要使用GitHub Actions，下面是一个简单的步骤：</strong></p>
<ol>
<li><p><strong>创建<code>.github/workflows</code>目录：</strong> 在你的GitHub仓库下创建一个名为<code>.github/workflows</code>的目录。</p>
</li>
<li><p><strong>在目录中添加workflow文件：</strong> 在<code>.github/workflows</code>目录中创建一个YAML文件，比如<code>build.yml</code>，并添加以下示例内容：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yamlCopy codename: Build and Deploy

on:
  push:
    branches:
      - main  <span class="token comment"># 这里使用你的分支名</span>

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: <span class="token number">14</span>

    - name: Install Dependencies
      run: <span class="token function">npm</span> <span class="token function">install</span>

    - name: Build
      run: <span class="token function">npm</span> run build  <span class="token comment"># 替换成你的构建命令</span>

    - name: Deploy
      run: <span class="token operator">|</span>
        <span class="token comment"># 在这里添加你的部署命令</span>
        <span class="token comment"># 比如上传到服务器、部署到GitHub Pages等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 这是一个基本的Node.js项目的构建和部署示例，确保根据你的项目需要进行调整。</p>
</li>
<li><p><strong>提交并推送更改：</strong> 将这个workflow文件提交到你的GitHub仓库，并推送到相应的分支。</p>
</li>
<li><p><strong>触发构建：</strong> 一旦推送到指定的分支，GitHub Actions会自动触发构建和部署。</p>
</li>
</ol>
<p><strong>部署目标具体步骤示例：</strong></p>
<ol>
<li><p><strong>上传到服务器：</strong> 如果你的应用托管在远程服务器上，你可能需要使用 SCP 或 rsync 等工具将构建后的文件上传到服务器。</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yamlCopy code- name: Deploy to Server
  run: <span class="token function">scp</span> <span class="token parameter variable">-r</span> ./dist/* username@your-server-ip:/path/to/destination/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>部署到云服务：</strong> 如果你使用云服务，你可能需要使用相应云服务的CLI或API来部署。</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yamlCopy code- name: Deploy to AWS S3
  run: aws s3 <span class="token function">sync</span> ./dist s3://your-s3-bucket/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>GitHub Pages：</strong> 如果你使用 GitHub Pages，你可能需要将构建后的文件推送到 <code>gh-pages</code> 分支。</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yamlCopy code- name: Deploy to GitHub Pages
  run: <span class="token operator">|</span>
    <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> gh-pages
    <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
    <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Deploy to GitHub Pages"</span>
    <span class="token function">git</span> push origin gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>切换到 <code>gh-pages</code> 分支。</p>
</li>
<li><p>将所有文件添加到暂存区。</p>
</li>
<li><p>提交更改并添加一条提交信息。</p>
</li>
<li><p>将更改推送到远程仓库的 <code>gh-pages</code> 分支。</p>
</li>
</ol>
<p>请确保在运行这个命令之前，你的构建脚本已经生成了需要发布到 GitHub Pages 的静态文件，并且这些文件在项目的根目录下。</p>
<p>问题二：在向github推送时报错：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Author identity unknown

*** Please tell me <span class="token function">who</span> you are.

Run

  <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"you@example.com"</span>
  <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span>

to <span class="token builtin class-name">set</span> your account<span class="token string">'s default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got '</span>Y@DESKTOP-IVT88AH.<span class="token punctuation">(</span>none<span class="token punctuation">)</span>'<span class="token punctuation">)</span>
error: src refspec HEAD does not match any
error: failed to push some refs to <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"you@example.com"</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>请确保将 “<a href="mailto:&#x79;&#x6f;&#117;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x79;&#x6f;&#117;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;</a>“ 替换为你在GitHub上注册的邮箱地址，”Your Name” 替换为你的GitHub用户名。</p>
<p>如果你只想在当前仓库中设置身份，可以去掉 <code>--global</code> 选项：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.email <span class="token string">"you@example.com"</span>
<span class="token function">git</span> config user.name <span class="token string">"Your Name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>设置完成后，再次运行Hexo的部署命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样就应该能够成功推送到GitHub了。如果仍然有问题，请确保你的Hexo配置文件中的 <code>deploy</code> 部分配置正确，并且你有写入权限到对应的GitHub仓库。</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript初学</title>
    <url>/2024/02/01/javascript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a><strong>位置</strong></h3><ol>
<li><p>位于头部<code>&lt;head&gt;&lt;/head&gt;</code></p>
</li>
<li><p>身体<code>&lt;body&gt;&lt;/body&gt;</code></p>
</li>
<li><p>外部JS文件引用<code>&lt;script type=&#39;te&#39;&gt;&lt;/script&gt;</code></p>
</li>
</ol>
<h3 id="三条打印语句"><a href="#三条打印语句" class="headerlink" title="三条打印语句"></a><strong>三条打印语句</strong></h3><ul>
<li><em>alert(“打印内容”)</em>:弹窗消息</li>
<li>dcoument.wirte(“打印内容”)：在文档中显示消息</li>
<li>console.log(“打印内容”)：在控制台打印消息</li>
</ul>
<h3 id="三种语句"><a href="#三种语句" class="headerlink" title="三种语句"></a>三种语句</h3><ol>
<li><p><strong>判断语句</strong><code>if...else...</code></p>
<ul>
<li><p><em>语法</em>：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	语句<span class="token operator">...</span>

<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	语句<span class="token operator">...</span>

<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>

	语句<span class="token operator">...</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><strong>分支语句</strong></p>
<ul>
<li><p><em>语法：</em></p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">表达式</span><span class="token operator">:</span>
        语句<span class="token operator">...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">表达式</span><span class="token operator">:</span>
        语句<span class="token operator">...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">表达式</span><span class="token operator">:</span>
        语句<span class="token operator">...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">default</span> ：
        语句<span class="token operator">...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
     
<span class="token punctuation">&#125;</span>
<span class="token comment">//tap:比较`case`和`switch`的条件表达式，满足就进入case.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><strong>循环语句</strong></p>
<ul>
<li><p><em>语法：</em></p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//先判断在执行</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	语句<span class="token operator">...</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//先执行在判断</span>
<span class="token keyword">do</span><span class="token operator">...</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件语句<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    语句<span class="token operator">...</span> 
<span class="token punctuation">&#125;</span>	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<p><strong>break和continue的区别：</strong></p>
<ul>
<li><p>break是*<code>跳出</code>*整个循环，continue是<code>跳过</code>当前循环，继续执行下一个循环。</p>
</li>
<li><p>break和continue都只会对最近一层循环起作用，要跳出上层循环可用标签。</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//标签使用</span>
<span class="token literal-property property">lable</span><span class="token operator">:</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
       		<span class="token keyword">continue</span> lable<span class="token punctuation">;</span> <span class="token comment">//加lable标签直接跳过上层for循环，</span>
   		<span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p><em>计时器：</em></p>
<ul>
<li>console.time(“标识”)：开始</li>
<li>console.timeEnd(“标识”)：结束</li>
</ul>
<h3 id="对象类"><a href="#对象类" class="headerlink" title="对象类"></a>对象类</h3><ul>
<li>对象类相当于一个塑料袋可以将其他类型，如number、string、boolean、null等封装在一起</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建对象</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new关键字调用构造函数创建对像</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//使用&#123;&#125;创建对象，方便直接添加属性名和属性值</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">"28"</span>，
    <span class="token literal-property property">genderb</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>；

<span class="token comment">//添加&amp;修改属性 （对象名.属性名 = 属性值）</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"孙悟空"</span>；
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">"男"</span>；

<span class="token comment">//读取属性（对象名.属性名）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//删除属性（delete 对象名.属性）</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name

<span class="token comment">//中括号[]读取属性名，属性名可以是任何值</span>
obj<span class="token punctuation">[</span><span class="token string">"hair"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"黄色"</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string">"eyes"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"蓝色"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> n<span class="token operator">=</span> <span class="token string">"hair"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出结果</span>
“黄色”

<span class="token comment">//属性值，属性值可以是对象，即在袋子里在套袋子</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Objrct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"猪八戒"</span>；
obj1<span class="token punctuation">.</span>test <span class="token operator">=</span> Obj2<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>test<span class="token punctuation">.</span>nmae<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出结果</span>
“猪八戒”
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a><em>in运算符</em></h3><ul>
<li><p><code>in</code>运算符可以检查一个对象里是否含有指定属性，如果有返回true,否则返回false</p>
</li>
<li><p>语法：</p>
<p>  ​	“属性名” in 对象</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test2"</span> <span class="token keyword">in</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name"</span> <span class="token keyword">in</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a><em><strong>函数</strong></em></h3><ul>
<li><p>使用函数声明来创建一个函数</p>
</li>
<li><p>语法：</p>
<ul>
<li><p><em>function 函数名（形参1，形参2，…）{</em></p>
<p>  ​		<em>语句</em>….	</p>
<p>  ​	<em>}</em></p>
</li>
</ul>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用函数表达式创建一个函数</p>
</li>
<li><p>语法：</p>
<ul>
<li><ul>
<li><p><em>var 函数名 &#x3D; function(形参1，形参2，…){</em></p>
<pre><code>    语句....

*&#125;*

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//将匿名函数function（）赋值给fun</span>
<span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>参数说明：</p>
<ul>
<li>函数调用时，解析器不会检查实参类型。所有有时需要对参数类型进形检查。</li>
<li>函数调用时，解析器不会检查实参数量，多余的参数不会被赋值。</li>
<li>函数的实参可以是任意类型，包括对象object.</li>
<li>如果实参数量小于形参数量，则没有实参对应的形参将是undefind.</li>
<li>return返回值,return后的语句都不会被执行。</li>
</ul>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明函数</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> d <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用函数</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  <strong>形参是对象类型：</strong></p>
<p>  <em>说明：对于形参较多的情况，可以将参数封装（打包）成一个对象类型进行传递。</em></p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义函数</span>
<span class="token keyword">function</span> <span class="token function">jieShao</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>o<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",今年"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">",我住在"</span><span class="token operator">+</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//创建对象</span>
<span class="token keyword">var</span> ifo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"猪八戒"</span>，
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span>高老庄
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用函数</span>
<span class="token function">jieShao</span><span class="token punctuation">(</span>ifo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  <strong>形参是函数类型：</strong></p>
<p>  <em>可以在函数里面调用外部函数</em></p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义函数</span>
<span class="token keyword">function</span> <span class="token function">jieShao</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>o<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",今年"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">",我住在"</span><span class="token operator">+</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//创建对象</span>
<span class="token keyword">var</span> ifo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"猪八戒"</span>，
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span>高老庄
<span class="token punctuation">&#125;</span>


 
<span class="token comment">//定义函数</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">a</span><span class="token punctuation">(</span>ifo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用函数</span>
<span class="token function">fun</span><span class="token punctuation">(</span>jieshao<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  <em>立即执行函数：</em>只执行一次</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//运行结果</span>
a <span class="token operator">=</span> <span class="token number">123</span>
b <span class="token operator">=</span> <span class="token number">456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p><em>枚举对象属性</em></p>
<ul>
<li><p>语法：</p>
<ul>
<li><p><code>for(var n in obj)&#123;&#125;</code></p>
</li>
<li><p>循环将obj的属性赋值给n,</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"孙悟空"</span>，
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">"25"</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出obj的属性名</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出属性值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<p><strong>作用域</strong></p>
<ul>
<li>作用域只一个变量的作用范围</li>
<li>在js中有两种作用域<ol>
<li>全局作用域<ul>
<li>直接编写在script标签中的js代码，都在全局作用域</li>
<li>全局作用域在页面打开时创建，在页面关闭时销毁</li>
<li>全局作用域中有一个全局对象window，它代表浏览器窗口，它由浏览器创建我么可以直接使用</li>
<li>在全局作用域中，创建的变量都会作为window对象的属性，创建的函数都会作为window的方法</li>
<li>全局作用域中的变量都会是全局变量，在页面任何部分都会被访问</li>
</ul>
</li>
<li>函数作用域<ul>
<li>调用函数时创建函数作用域，函数执行完毕被销毁</li>
<li>每调用一次就会创建一个新的函数作用域，他们之间相互独立</li>
<li>当在函数作用域操作一个变量时，它会先在自身的作用域中寻找，如果没有继续往上一级作用域寻找。如果找到全局作用域都没有就会报错。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="工厂方式创建对象"><a href="#工厂方式创建对象" class="headerlink" title="工厂方式创建对象"></a>工厂方式创建对象</h3><p><em>该方式可以批量创建对象</em>,</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//工厂方式创建的对象都是Object类型，无法区分出不同类型的对象。</span>
<span class="token keyword">function</span> <span class="token function">creatPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//创建一个对象</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加属性</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age  <span class="token operator">=</span> age<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">sayNmae</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token function">creatPerson</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span>；
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">creatPerson</span><span class="token punctuation">(</span><span class="token string">"白骨精"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span>；

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/***********************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li>构造函数的执行流程<ol>
<li>立即创建一个新的对像</li>
<li>将新建的对象设置为函数中的this，在构造函数中可以使用this来引用新建对象</li>
<li>逐行执行函数中的代码</li>
<li>将新建的对象作为返回值</li>
</ol>
</li>
<li>使用同一个构造函数创建的对象，我么称为同一类对象，也将一个构造函数成为一个类</li>
<li>类命名首字母大写</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> mame<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">talk</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span>；
    <span class="token punctuation">&#125;</span>；<span class="token comment">//公共函数，每实例化一次就开辟一个新的空间，浪费资源，通过原型模型解决</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//对象实例化</span>
<span class="token keyword">var</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//判断dog是否时person的实例</span>
cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog inst<span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em>this的情况</em></p>
<ol>
<li><p><em>当以函数的形式调用时，this时window</em></p>
</li>
<li><p><em>当以方法调用时，谁调用方法this就是谁</em></p>
</li>
<li><p><em>当以构造函数调用时，this就是新创建的那个对象</em></p>
</li>
</ol>
<h4 id="原型模型（prototpe）"><a href="#原型模型（prototpe）" class="headerlink" title="原型模型（prototpe）"></a><strong>原型模型（prototpe）</strong></h4><p>​	我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype,这个属性对应着一个对象，这个对象就是原型对象</p>
<ul>
<li>如果函数作为普通函数调用prototype没有任何作用，</li>
<li>当函数以构造函数的形式调用时，它所创建的对象都会含有一个隐含的属性，指向该构造函数的原型对象，可以通过 <code>__proto__</code>来访问该属性</li>
<li>原型对象相当于类的一个公共空间，通过该类实例化的所有对象都可以访问该公共空间的内容</li>
<li>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则像原型对象处找</li>
</ul>
<p><em>总结：在创建构造函数的时候，可以将一些对象那个共有 的属性和方法统一添加到构造函数的原型对中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了</em></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//向MyClass的原型中添加属性a</span>
<span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> mc <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> mc1 <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
访问
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="DOM-Docment-Object-Model"><a href="#DOM-Docment-Object-Model" class="headerlink" title="DOM(Docment Object Model)"></a>DOM(Docment Object Model)</h3><p>将页面上的组成元素都看成是一个对象，通过获取对象，在对获取的对象进行操作管</p>
<h4 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h4><p>通过document对象调用</p>
<ol>
<li><p>getElementById()  </p>
<p>–通过<strong>id</strong>属性获取<strong>一个</strong>元素节点对象</p>
</li>
<li><p>getElementsByTag Name()  </p>
<p>–通过<strong>标签名</strong>获取<strong>一组</strong>元素节点 </p>
<p>–这个方法会返回一个类数组对象，所查询到的元素会封装到对象那个中</p>
</li>
<li><p>getElementsByName()</p>
<p>–通过<strong>name</strong>属性获取<strong>一组</strong>元素节点对象</p>
<p>–读取标签内容：元素.innerHTML</p>
<p>–读取属性：元素.属性名</p>
<p>–注意：</p>
<ol>
<li><p>读取class属性采用：元素.className  </p>
<p>如：var box1 &#x3D; document.getElementByClassName(“box1”); </p>
</li>
<li><p>在document中有一个属性body，它保存的是body的引用, </p>
<p>如:var body &#x3D; documen.body;</p>
</li>
<li><p>document.documentElement保存的是html跟标签</p>
<p>如：var html &#x3D; document.documentElement;</p>
</li>
<li><p>document.querySelector()</p>
<p>–需要一个选择器的字符串作为参数，可以根据一个css选择器来查询一个查询一个元素的对象节点</p>
<p>–IE8也支持</p>
<p>–只会选择出符合条件的第一个元素</p>
<p>如：var div &#x3D; document.querySelector(“.box div”);</p>
</li>
<li><p>document.querySelectorAll</p>
<p>–也数组的形式返回符合提条件的所有元素。</p>
</li>
</ol>
</li>
</ol>
<h4 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>东京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><em>方法一：</em></h6><ol>
<li><p>创建节点</p>
<ol>
<li>document.createElement()<ul>
<li>可以用于创建一个元素对象</li>
</ul>
</li>
</ol>
<ul>
<li><p>需要一个标签名作为参数</p>
</li>
<li><p>将创建好的标签对象作为返回值</p>
<p>eg: var li &#x3D; document.createElement(“li”);</p>
</li>
</ul>
<ol start="2">
<li>document.createTextBode()</li>
</ol>
<ul>
<li><p>用来创建一个文本节点对象</p>
</li>
<li><p>需要一个文本内容作为参数，并将该内容作为返回值</p>
</li>
</ul>
<pre><code>eg：var gtText = document.createTextNode(&quot;你好&quot;)
</code></pre>
<ol start="2">
<li>绑定关系</li>
</ol>
<p>用appendChild()将gtText设置为li的子节点</p>
<ul>
<li><p>appendChild()</p>
<ul>
<li><p>usag：父节点.appendChild(子节点)</p>
<p>eg：li.appendChild(gtText);</p>
</li>
<li><p>向一个父节点中添加子节点</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><em>方法二：</em></p>
<ol>
<li>父节点.innerHtml +&#x3D; “<li>广州<li>“ <ul>
<li>这种方式会将子节点全部删除在添加，不建议使用</li>
</ul>
</li>
</ol>
<p><em>方法二：</em></p>
<p>​	综合方法一和方法二</p>
<ul>
<li>创建一个标签：var li &#x3D; documentElement(“li”)</li>
<li>想li中添加文本：li.innerHTML &#x3D;  “广州”</li>
<li>将li添加到父节点city中：city.appendChild(li)</li>
</ul>
<h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><ol>
<li><p>replaceChild()</p>
<ul>
<li><p>usag：父节点.replaceChild(新节点，旧节点)</p>
<p>eg：city.replaceChild(li, bj);</p>
</li>
<li><p>可以使指定的子几点替换已有的子节点</p>
</li>
</ul>
</li>
</ol>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ol>
<li><p>remove.Child()</p>
<p>–usag1：父节点.removeChild(子节点)</p>
<p>​       eg：city.removeChild(bj)</p>
<p>​       删除一个子节点</p>
<p>–usag2：子节点.parentNode.removeChild(子节点)</p>
<p>​      eg：bj.parentNode.removeChild(bj)</p>
<p>​	  这中方法可以不用单独获取父节点</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>docker初学</title>
    <url>/2018/09/07/docker-shi-yong/</url>
    <content><![CDATA[<h1 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h1><p>[toc]</p>
<h3 id="Docker三个基本概念"><a href="#Docker三个基本概念" class="headerlink" title="Docker三个基本概念"></a>Docker三个基本概念</h3><ul>
<li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>
<li><strong>容器（容器ID&#x2F;NAME）</strong>：镜像（Image）和容器（容器ID&#x2F;NAME）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li>
</ul>
<p>Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p>
<p>Docker 容器通过 Docker 镜像来创建。</p>
<p>容器与镜像的关系类似于面向对象编程中的对象与类。</p>
<table>
<thead>
<tr>
<th align="left">Docker</th>
<th align="left">面向对象</th>
</tr>
</thead>
<tbody><tr>
<td align="left">容器</td>
<td align="left">对象</td>
</tr>
<tr>
<td align="left">镜像</td>
<td align="left">类</td>
</tr>
</tbody></table>
<p><img src="https://www.runoob.com/wp-content/uploads/2016/04/576507-docker1.png" alt="img"></p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Docker 镜像(Images)</td>
<td align="left">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td>
</tr>
<tr>
<td align="left">Docker 容器(容器ID&#x2F;NAME)</td>
<td align="left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td>
</tr>
<tr>
<td align="left">Docker 客户端(Client)</td>
<td align="left">Docker 客户端通过命令行或者其他工具使用 Docker SDK (<a href="https://docs.docker.com/develop/sdk/">https://docs.docker.com/develop/sdk/</a>) 与 Docker 的守护进程通信。</td>
</tr>
<tr>
<td align="left">Docker 主机(Host)</td>
<td align="left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>
</tr>
<tr>
<td align="left">Docker Registry</td>
<td align="left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td>
</tr>
<tr>
<td align="left">Docker Machine</td>
<td align="left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>
</tr>
</tbody></table>
<h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><h5 id="镜像操作："><a href="#镜像操作：" class="headerlink" title="镜像操作："></a><strong>镜像操作：</strong></h5><ol>
<li><p><em>列出本地所有镜像：</em></p>
<ul>
<li><p><code>docker images</code></p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hecs-350259:~:<span class="token comment"># docker images</span>
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
test/centos   v1        aba5e913250d   <span class="token number">16</span> minutes ago   231MB
ubuntu        latest    ba6acccedd29   <span class="token number">2</span> years ago      <span class="token number">72</span>.8MB
centos        latest    5d0da3dc9764   <span class="token number">2</span> years ago      231MB
ubuntu        <span class="token number">15.10</span>     9b9cb95443b5   <span class="token number">7</span> years ago      137MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  各个选项说明:</p>
<ul>
<li><strong>REPOSITORY：</strong>表示镜像的仓库源</li>
<li><strong>TAG：</strong>镜像的标签</li>
<li><strong>IMAGE ID：</strong>镜像ID</li>
<li><strong>CREATED：</strong>镜像创建时间</li>
<li><strong>SIZE：</strong>镜像大小</li>
</ul>
<p>  <em>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</em></p>
</li>
</ul>
</li>
<li><p><em>查找镜像</em></p>
<ul>
<li><p>通过Docker Hub 网址为： **<a href="https://hub.docker.com/**%E6%90%9C%E7%B4%A2">https://hub.docker.com/**搜索</a></p>
</li>
<li><p>通过<code>docker search [关键字]</code></p>
<p>  <img src="/docker%E4%BD%BF%E7%94%A8.assets/image-20231226214710217.png" alt="image-20231226214710217"></p>
</li>
</ul>
</li>
<li><p><em>下载镜像：</em></p>
<ul>
<li><code>docker pull [image_name]</code></li>
<li>参数：<ul>
<li><code>-a, --all-tags</code>：下载所有标签的镜像 。</li>
</ul>
</li>
</ul>
</li>
<li><p><em>删除本地镜像：</em></p>
<ul>
<li><code>docker rmi [image_name]</code></li>
<li>参数：<ul>
<li><code>-f, --force</code>：强制删除镜像。</li>
<li><code>-a, --all</code>：删除所有镜像。</li>
</ul>
</li>
</ul>
</li>
<li><p>创建镜像</p>
<ul>
<li><p>从已经创建的容器中更新镜像，并提交这个镜像</p>
<ul>
<li><p>更新镜像</p>
<ol>
<li><p>进入镜像，执行更新命令，如ubuntu执行<code>apt-get update</code>更新系统。</p>
</li>
<li><p>通过<code>docker commit</code>提交副本</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">"has update"</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">"runoob"</span> e218edb10161 runoob/ubuntu:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> <em>参数说明：</em></p>
<ul>
<li>-m:提交的描述信息（更改描述）</li>
<li>-a:指定镜像作者</li>
<li>runoob&#x2F;ubuntu:v2:指定要创建的目标镜像名</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>使用<code>Docker build</code>创建新的镜像</p>
<p>  <em>docker build -t 镜像名称 &#x2F;Dockerfile所在的目录路径</em></p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> xiaosan/centos:6.7 /docker/dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  <em>参数说明：</em></p>
<ul>
<li>-t:指定创建的镜像名</li>
<li>&#x2F;docker&#x2F;dockerfile:dockerfile文件的所在目录</li>
</ul>
</li>
</ul>
</li>
<li><p>修改镜像标签：</p>
<ul>
<li><p>使用<code>docker tag</code>修改镜像标签</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> tag 860c279d2fec xiaosan/centos:dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<h5 id="容器操作："><a href="#容器操作：" class="headerlink" title="容器操作："></a><strong>容器操作：</strong></h5><ol>
<li><p><em>正在运行的容器：</em></p>
<ul>
<li><p><code>docker ps</code></p>
</li>
<li><p>参数：</p>
<ul>
<li><code>-a, --all</code>：列出所有容器，包括停止的。</li>
<li><code>-n</code>:显示最近创建的容器</li>
<li><code>-q</code>:只显示容器编号</li>
</ul>
</li>
</ul>
</li>
<li><p><em>创建并运行一个容器：</em></p>
<ul>
<li><p><code>docker run [参数] [image] [command] [args]</code></p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hecs-350259:~:<span class="token comment"># docker run -it centos /bin/bash</span>
<span class="token punctuation">[</span>root@946cce57f9d1 /<span class="token punctuation">]</span><span class="token comment"># ls</span>
bin  etc   lib	  lost+found  mnt  proc  run   srv  tmp  var
dev  home  lib64  media       opt  root  sbin  sys  usr
<span class="token punctuation">[</span>root@946cce57f9d1 /<span class="token punctuation">]</span><span class="token comment"># exit #退出终端</span>
<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>参数：</p>
<ul>
<li><code>-d, --detach</code>：在后台运行容器。</li>
<li><code>-p, --publish</code>：将容器端口映射到主机端口。</li>
<li><code>--name</code>：为容器指定名称。</li>
<li><code>-it</code>，启动一个交互式容器</li>
</ul>
</li>
</ul>
</li>
<li><p><em>启动停止的容器：</em></p>
<ul>
<li><code>docker restart/start [参数] [容器ID/NAME]</code></li>
<li>参数：<ul>
<li><code>-a, --attach</code>：启动并附加到容器。</li>
</ul>
</li>
</ul>
</li>
<li><p><em>停止运行中的容器：</em></p>
<ul>
<li><code>docker stop [参数] [容器ID/NAME]</code></li>
<li>参数：<ul>
<li><code>-t, --time</code>：指定停止前等待的时间，默认为10秒。</li>
</ul>
</li>
</ul>
</li>
<li><p><em>在运行中的容器中执行命令：</em></p>
<ul>
<li><p><code>docker exec [参数] [容器ID/NAME] [command]</code></p>
</li>
<li><p>参数：</p>
<ul>
<li><code>-it</code>：以交互式方式执行命令。</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hecs-350259:~:<span class="token comment"># docker ps                 </span>
CONTAINER ID  IMAGE   COMMAND      CREATED       STATUS   PORTS     NAMES
eefa60edf69d  centos  <span class="token string">"/bin/bash"</span>  <span class="token number">7</span> minutes ago   Up    <span class="token number">3</span> seconds  centos_test
Usage:  <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
hecs-350259:~:<span class="token comment"># docker exec -it centos_test /bin/bash</span>
<span class="token punctuation">[</span>root@eefa60edf69d /<span class="token punctuation">]</span><span class="token comment"># exit</span>
<span class="token builtin class-name">exit</span>
hecs-350259:~:<span class="token comment"># docker ps   #退出后容器任然在运行                         </span>
CONTAINER ID  IMAGE  COMMAND      CREATED      STATUS     PORTS       NAMES
eefa60edf69d centos  <span class="token string">"/bin/bash"</span>  <span class="token number">9</span> minutes ago  Up  About a minute  centos_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><em>导出容器</em></p>
<ul>
<li><p><code>docker export [容器ID/NAME] &gt; 路径/包名.tar</code></p>
  <pre class="line-numbers language-none"><code class="language-none">hecs-350259:~:# docker export centos_test &gt; centos.tar         
hecs-350259:~:# ls    
centos.tar  install.sh
hecs-350259:~:# ll
total 228M
-rw-r--r-- 1 root root 228M Dec 26 21:17 centos.tar
-rw-r--r-- 1 root root  35K Dec 19 16:03 install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><em>导入容器</em></p>
<ul>
<li><p>cat 快照文件 | docker import - [镜像源]:tag</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hecs-350259:~:<span class="token comment"># cat centos.tar | docker import - test/centos:v1</span>
sha256:aba5e913250d3fc539ad01a4cf798801426f4529ddf1459803d7f12813e721d6
hecs-350259:~:<span class="token comment"># docker images                         </span>
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
test/centos   v1        aba5e913250d   <span class="token number">16</span> seconds ago   231MB
ubuntu        latest    ba6acccedd29   <span class="token number">2</span> years ago      <span class="token number">72</span>.8MB
centos        latest    5d0da3dc9764   <span class="token number">2</span> years ago      231MB
ubuntu        <span class="token number">15.10</span>     9b9cb95443b5   <span class="token number">7</span> years ago      137MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">import</span> http://example.com/exampleimage.tgz example/imagerepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
</li>
<li><p><em>删除容器</em></p>
<ul>
<li><p><code>docker rm -f [容器ID/NAME]</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hecs-350259:~:<span class="token comment"># docker ps   </span>
CONTAINER ID  IMAGE   COMMAND      CREATED        STATUS   PORTS      NAMES
eefa60edf69d  centos  <span class="token string">"/bin/bash"</span>  <span class="token number">59</span> minutes ago   Up    <span class="token number">51</span> minutes  centos_test
hecs-350259:~:<span class="token comment"># docker rm -f centos_test   </span>
centos_test
hecs-350259:~:<span class="token comment"># docker ps               </span>
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ol>
<h5 id="容器连接："><a href="#容器连接：" class="headerlink" title="容器连接："></a>容器连接：</h5><p>1. </p>
<h5 id="容器状态管理："><a href="#容器状态管理：" class="headerlink" title="容器状态管理："></a><strong>容器状态管理：</strong></h5><ol>
<li><em>查看容器日志：</em><ul>
<li><code>docker logs [参数] [容器ID/NAME]</code></li>
<li>参数：<ul>
<li><code>--follow</code>：实时跟踪日志。</li>
</ul>
</li>
</ul>
</li>
<li><em>显示容器详细信息：</em><ul>
<li><code>docker inspect [容器ID/NAME]</code></li>
</ul>
</li>
<li><em>显示容器中运行的进程：</em><ul>
<li><code>docker top [容器ID/NAME]</code></li>
</ul>
</li>
<li><em>显示容器实时资源使用情况：</em><ul>
<li><code>docker stats [参数] [容器ID/NAME]</code></li>
<li>参数：<ul>
<li><code>--no-stream</code>：关闭实时输出。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="网络操作："><a href="#网络操作：" class="headerlink" title="网络操作："></a><strong>网络操作：</strong></h5><ol>
<li><em>列出所有网络：</em><ul>
<li><code>docker network ls</code></li>
</ul>
</li>
<li><em>显示网络详细信息：</em><ul>
<li><code>docker network inspect [network]</code></li>
</ul>
</li>
<li><em>创建自定义网络：</em><ul>
<li><code>docker network create [参数] [network]</code></li>
<li>参数：<ul>
<li><code>--driver</code>：指定网络驱动程序。</li>
</ul>
</li>
</ul>
</li>
<li><em>将容器连接到网络：</em><ul>
<li><code>docker network connect [network] [容器ID/NAME]</code></li>
</ul>
</li>
<li><em>将容器从网络断开：</em><ul>
<li><code>docker network disconnect [network] [容器ID/NAME]</code></li>
</ul>
</li>
</ol>
<h5 id="数据卷操作："><a href="#数据卷操作：" class="headerlink" title="数据卷操作："></a><strong>数据卷操作：</strong></h5><ol>
<li><em>列出所有数据卷：</em><ul>
<li><code>docker volume ls</code></li>
</ul>
</li>
<li><em>创建数据卷：</em><ul>
<li><code>docker volume create [参数] [volume]</code></li>
</ul>
</li>
<li><em>显示数据卷详细信息：</em><ul>
<li><code>docker volume inspect [volume]</code></li>
</ul>
</li>
</ol>
<h5 id="其他操作："><a href="#其他操作：" class="headerlink" title="其他操作："></a><strong>其他操作：</strong></h5><ol>
<li><em>显示 Docker 系统信息：</em><ul>
<li><code>docker info</code></li>
</ul>
</li>
<li><em>显示 Docker 版本信息：</em><ul>
<li><code>docker version</code></li>
</ul>
</li>
<li><em>清理无用的镜像、容器和数据卷：</em><ul>
<li><code>docker system prune [参数]</code></li>
<li>参数：<ul>
<li><code>--all, -a</code>：清理所有未使用的资源。</li>
</ul>
</li>
</ul>
</li>
<li><em>使用 Docker Compose 运行多容器应用：</em><ul>
<li><code>docker-compose up [参数]</code></li>
<li>参数：<ul>
<li><code>-d, --detach</code>：在后台运行。</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
